<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>学习笔记 on 看见人生</title><link>/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><description>Recent content in 学习笔记 on 看见人生</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy; 2021 &lt;a href="https://www.kanjian.life/">天青山来客&lt;/a></copyright><lastBuildDate>Thu, 04 Mar 2021 15:37:48 +0800</lastBuildDate><atom:link href="/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Defer, Panic, and Recover</title><link>/posts/xuexi/go/%E8%B0%83%E5%BA%A6/</link><pubDate>Thu, 04 Mar 2021 15:37:48 +0800</pubDate><guid>/posts/xuexi/go/%E8%B0%83%E5%BA%A6/</guid><description>// One round of scheduler: find a runnable goroutine and execute it. // Never returns. func schedule() { _g_ := getg() if _g_.m.locks != 0 { throw(&amp;quot;schedule: holding locks&amp;quot;) } if _g_.m.lockedg != 0 { stoplockedm() execute(_g_.m.lockedg.ptr(), false) // Never returns. } // We should not schedule away from a g that is executing a cgo call, // since the cgo call is using the m's g0 stack. if _g_.m.incgo { throw(&amp;quot;schedule: in cgo&amp;quot;) }</description></item><item><title>Defer, Panic, and Recover</title><link>/posts/xuexi/go/defer-panic-and-recover/</link><pubDate>Fri, 26 Feb 2021 15:37:48 +0800</pubDate><guid>/posts/xuexi/go/defer-panic-and-recover/</guid><description>1. defer 语句有以下三条简单的规则。 1. 在defer语句调用的地方，参数值是取得defer语句执行的值 在下面这个例子中，“i”的值在fmt.Println语句</description></item><item><title>循环</title><link>/posts/xuexi/go/loop/</link><pubDate>Fri, 26 Feb 2021 10:30:48 +0800</pubDate><guid>/posts/xuexi/go/loop/</guid><description>Golang的循环 go语言不像其它语言那样将循环分为for循环和while循环，而while又进一步可以分为do&amp;hellip;while&amp;helli</description></item></channel></rss>